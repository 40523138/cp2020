var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'HW1', 'text': "In order for a computer to function, it needs a temporary storage space to store data that is input into the computer from the user or the hard drive, and to store data that is about to be written to more permanent storage. This temporary storage is called RAM, or random access memory. RAM is the workspace for the CPU to process data. When the computer boots up the OS (operating system) loads the start files into RAM. RAM is dynamic and constantly changing. It operates much faster than a hard drive, and can be changed at any time by the computer. RAM is volatile memory which means it loses all its information when power is removed, so it can only be used as temporary storage. This memory is used for operating systems startup files (bootstrap loader), programs, data, and disk caching. Adding RAM to a computer is one of the easiest and most effective upgrades a person can perform, since it drastically improves the transfers between the CPU and the other input devices (like hard drives), and this increases the overall speed of the computer. \n 了使計算機正常運行，它需要一個臨時存儲空間來存儲從用戶或硬盤驅動器輸入到計算機中的數據， 並將要寫入的數據存儲到更永久的存儲器中。該臨時存儲稱為RAM或隨機存取存儲器。  RAM是CPU處理數據的工作區。計算機啟動時，操作系統（操作系統）將啟動文件加載到RAM中。  RAM是動態的並且不斷變化。它的運行速度比硬盤驅動器快得多，並且可由計算機隨時更改。  RAM是易失性內存，這意味著在斷電時它會丟失所有信息，因此只能用作臨時存儲。 該內存用於操作系統啟動文件（引導加載程序），程序，數據和磁盤緩存。 向計算機添加RAM是一個人可以執行的最簡單，最有效的升級之一，因為它可以極大地改善CPU與其他輸入設備 (如硬盤驅動器）之間的傳輸，從而提高了計算機的整體速度。 \n \n When a computer is turned on, the computer’s microprocessor uses a program called the  BIOS  (basic input/output system) to start the computer system. The BIOS also manages data flow between the computer's operating system and attached/connected devices, such as the hard drive, video adapter, keyboard, mouse, and printer. \n 計算機的BIOS是最常見的固件示例。固件是芯片上的軟件，是計算機啟動時計算機運行的第一個軟件。  BIOS具有多個角色，包括執行開機自檢，以測試和初始化處理器，視頻卡，磁盤驅動器和適配器。  BIOS還包括用於計算機的低級“操作系統”，它使計算機可以從最基本的組件（包括鍵盤，鼠標和磁盤驅動器）獲取輸入並提供輸出。  BIOS存儲在ROM（只讀存儲器）芯片中，但可以通過過程調用“刷新”進行升級。\n\nBIOS是允許用戶更改設置的程序，而設置本身則存儲在互補金屬氧化物半導體或CMOS中。 CMOS是電池供電的存儲芯片。 \n A computer’s BIOS is the most common example of firmware. Firmware is software on a chip, and is the first software run by the computer when the machine is booted up. The BIOS has several roles, including performing the power-on self-test, which tests and initializes the processor, video card, disk drives, and adapters. The BIOS also includes the low-level “operating system” for the computer, which allows the computer to take input from and give output to the most basic components, including the keyboard, mouse, and disk drives. The BIOS is stored in a ROM (Read-only memory) chip, but can be upgraded through a process call “flashing.” \n While the BIOS is a program that allows the user to make changes to the settings, the settings themselves are stored in the complementary metal-oxide semiconductor, or CMOS. The CMOS is a battery-powered memory chip. \n 1.BIOS用於配置通用設置，例如計算機讀取設備的順序。此命令稱為引導命令。 此外，BIOS還用於配置打開和關閉各種輸入/輸出端口的設置，以及各種CPU設置（例如虛擬化和超頻）的配置。 更改BIOS時要非常小心。不正確的設置可能會使您的計算機無法啟動。 \n", 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': '設計一甲 \n import urllib.request\nurl = "https://nfulist.herokuapp.com/?semester=1091&courseno=0762"\ncp1a = []\nfor line in urllib.request.urlopen(url):\n    cp1a.append(int(line.decode(\'utf-8\').rstrip()))\nprint(cp1a)\nprint("總共有" + str(len(cp1a)) + " 筆")\ntotal = len(cp1a)\nfor i in range(total):\n    print("http://github.com/" + str(cp1a[i]) + "/cp2020") \n 1.\xa0import urllib.request \n \xa0 \xa0\xa0 導入 urllib.request:\xa0 https://docs.python.org/3/library/urllib.request.html \n \xa0 \xa0 並且透過 urllib.request 模組中的 urlopen() 開啟網路 url 連結資料 \n 2. url = "https://nfulist.herokuapp.com/?semester=1091&courseno=0762" \n \xa0 \xa0 設定名單的源頭從 https://nfulist.herokuapp.com/?semester=1091&courseno=0762這個網址來 \n 3.cp1a = [] \n \xa0 \xa0設定cp1a這個數列 \n 4.\xa0for line in urllib.request.urlopen(url): \xa0 \xa0 cp1a.append(int(line.decode(\'utf-8\').rstrip())) \n \xa0 \xa0 透過 urllib.request模組裡的urlopen()取下網際資料但由於資料為binary格式所以必須使用utf-8進行\xa0 \xa0 \xa0 編碼將它轉換成我們可看得懂的數字 \n 5. print(cp1a) \n \xa0 \xa0 顯示cp1a , 由於前面有定義數列了所以cp1a的資料將以數列方式呈現 \n 6. print("總共有" + str(len(cp1a)) + " 筆") \n \xa0 \xa0 顯示\xa0總共有+字串cp1a的資料數+筆 \n 7. total = len(cp1a) \n \xa0 \xa0 設定total為cp1a資料數 \n 8.\xa0for i in range(total): \xa0 \xa0 print("http://github.com/" + str(cp1a[i]) + "/cp2020") \n \xa0 \xa0 用迴圈下去跑(total的資料數)相同的次數\xa0 \n \xa0 \xa0 並顯示http://github.com/+ cp1a資料裡每個數據 + /cp2020 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW2-1', 'text': 'from   random   import   shuffle  從隨機導入洗牌   list  清單 =   [ 40523138 ,   40523148 ,   40723217 ,   40728238 ,   40823148 ,   40823152 ,   40923201 ,   40923202 ,   40923203 ,   40923204 ,   40923205 ,   40923206 ,   40923207 ,   40923208 ,   40923209 ,   40923210 ,   40923211 ,   40923212 ,   40923213 ,   40923214 ,   40923216 ,   40923217 ,   40923218 ,   40923219 ,   40923220 ,   40923221 ,   40923223 ,   40923224 ,   40923225 ,   40923226 ,   40923227 ,   40923228 ,   40923229 ,   40923230 ,   40923231 ,   40923232 ,   40923233 ,   40923234 ,   40923235 ,   40923236 ,   40923237 ,   40923238 ,   40923239 ,   40923240 ,   40923241 ,   40923242 ,   40923243 ,   40923244 ,   40923245 ,   40923246 ,   40923247 ,   40923248 ,   40923249 ,   40923250 ,   40923251 ,   40923252 ,   40923253 ]     shuffle ( list )  隨機出現（列表）   step   =   11  數量(人數)   b   =   [ list [ i : i + step ]   for   i   in  ＃ b   =   [ 清單 [i：i + step]   for   i   in   range ( 0 , len ( list ), step )]  範圍 ( 0 , len（清單） 數量 )]   print ( b )  顯示出來 （b) import urllib.request\xa0 導入\xa0urllib.request target_url = "https://nfulist.herokuapp.com/?semester=1091&courseno=0776" cp1b=[] for line in urllib.request.urlopen(target_url):\xa0\xa0 用於行進\xa0urllib.request.urlopen(target_url): \xa0 \xa0 cp1b.append(int(line.decode(\'utf-8\').rstrip()))\xa0\xa0 cp1b.附加(line.decode(\'utf-8\').rstrip()) \xa0 from random import shuffle\xa0\xa0 從隨機導入洗牌 shuffle(cp1b)\xa0\xa0 隨機出現（cp1b） n = 5\xa0 \xa0 數量(分組) m = int(len(cp1b)/n)\xa0 list2 = [] for i in range(0, len(cp1b), m):\xa0 \xa0 在範圍內 ( 0 , \xa0 len (cp1b ), \xa0 m ): \xa0 \xa0 list2.append(cp1b[i:i+m])\xa0 \xa0 清單2. 附加 (cp1b [ i : i + m ]) print(list2)\xa0\xa0 顯示出來 （清單2） \n', 'tags': '', 'url': 'HW2-1.html'}, {'title': 'HW3', 'text': 'Write a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates. \n 編寫一個包含一個列表並返回一個新列表的程序（函數！），該列表包含第一個列表的所有元素減去所有重複項。 \n \t# Exercise 13:\n\t# Write a function that takes a list and returns a new list that contains \n\t# all the elements of the first list minus duplicates.\n\t\n\n\t# this one uses a for loop\n\tdef dedupe_v1(x):\n\t  y = []\n\t  for i in x:\n\t    if i not in y:\n\t      y.append(i)\n\t  return y\n\t\n\n\t#this one uses sets\n\tdef dedupe_v2(x):\n\t    return list(set(x))\n\t\n\n\ta = [1,2,3,4,3,2,1]\n\tprint a\n\tprint dedupe_v1(a)\n\tprint dedupe_v2(a)\n\n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'HW3-1', 'text': "Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string, except with the words in backwards order. For example, say I type the string: \n \xa0 My name is Michele \n Then I would see the string: \n \xa0 Michele is name My \n shown back to me. \n 編寫一個程序（使用函數！），要求用戶提供包含多個單詞的長字符串。向用戶打印相同的字符串，但單詞順序相反。例如，說我鍵入字符串： \n \xa0 \n \xa0 我叫米歇爾 \n 然後我會看到字符串： \n \xa0 \n \xa0 米歇爾是我的名字 \n 顯示給我。 \n def reverseWord(w):\n\t  return ' '.join(w.split()[::-1])\n \n", 'tags': '', 'url': 'HW3-1.html'}, {'title': 'HW3-3', 'text': 'Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password. Include your run-time code in a main method. \n  用Python編寫密碼生成器。在生成密碼的方式上要有創意-強密碼包含小寫字母，大寫字母，數字和符號。密碼應該是隨機的，每次用戶要求輸入新密碼時都會生成一個新密碼。在主要方法中包括您的運行時代碼。 \n # generate a password with length "passlen" with no duplicate characters in the password\n\n\nimport random\n\n\ns = "abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?"\npasslen = 8\np =  "".join(random.sample(s,passlen ))\nprint p\n \n \n', 'tags': '', 'url': 'HW3-3.html'}, {'title': 'W7', 'text': 'https://www.kaggle.com/a40523138/cp2020w7/ \xa0 \n', 'tags': '', 'url': 'W7.html'}, {'title': 'Note', 'text': 'week 1:\xa0 調整作業環境(proxy、git config) \n Week 2 : 使用git clone 下在自己倉儲於近端,並加入git submodule做為網站架構 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 git submodule add  https://gothub.com/mdecourse/cmsimde.git \xa0cmsimde \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 於倉儲的設定->github pages->sourse->master(root) 建造個人網頁git.io \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 遇到問題:在mde.tw裡面分組的網站連結出現的是https://s40523138.github.io/cp2020/ 但本身網站的網址是https:// 40523138.github.io/cp2020/ \n Week3: solve problem(尚未解決) 由HW2解決 \n week4:問題已成功解決 \n week5: 分組 \n week7:了解使用kaggle \n week8~10:深入了解HW2以及亂數分組 \n week11~14:HW3的翻譯以及演練 \n week15~17:將整理內容上傳及評分 \n \n', 'tags': '', 'url': 'Note.html'}, {'title': '心得', 'text': '於學習的途中有遇到許多困難，但上去GITTER上看許多同學的發表以及老師的回答都能成功解決問題。組長以及組員們十分給力的互相協助完成許多難題。大家也不遺餘力地利用假日來開會，希望能夠順利的完成這次的課程。', 'tags': '', 'url': '心得.html'}]};